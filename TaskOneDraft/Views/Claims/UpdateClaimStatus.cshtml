@model IEnumerable<TaskOneDraft.Models.Claims>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

<style>
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
        justify-content: center;
        margin-bottom: 100px;
    }

    .flip-card {
        background-color: transparent;
        width: 400px; /* Increased the width */
        height: 300px;
        perspective: 1000px;
        margin: 20px;
        position: relative;
    }

    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        border-radius: 8px;
    }

    .flip-card.flipped .flip-card-inner {
        transform: rotateY(180deg);
    }

    .flip-card-front,
    .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 15px;
    }

    .flip-card-front {
        background: linear-gradient(135deg, white, #00ced1);
        color: black;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .flip-card-back {
        background: linear-gradient(135deg, #00ced1, white);
        color: black;
        transform: rotateY(180deg);
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .claim-info {
        margin-bottom: 10px;
        font-size: 14px;
    }

    .status-dropdown {
        width: 80%;
        margin-top: 10px;
    }

    .flip-button {
        background-color: darkturquoise;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        color: white;
        transition: background-color 0.3s;
        margin-top: 10px;
    }

        .flip-button:hover {
            background-color: #00ced1;
        }

    .btn-reset {
        background-color: #ff6347;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn-reset:hover {
            background-color: #d9534f;
            color: white;
        }

    .toast {
        min-width: 450px;
        padding: 20px;
        font-size: 16px;
    }

    .toast-title {
        font-size: 18px;
        font-weight: bold;
    }

    .toast-message {
        font-size: 16px;
    }

    .toast-top-right {
        right: 12px;
    }
</style>

<h2>Update Claim Status</h2>

<div class="search-container">
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" class="search-input">

    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" class="search-input">

    <button id="resetButton" class="btn-reset">Reset</button>
</div>

@if (Model.Any())
{
    <div class="card-container">
        @foreach (var claim in Model)
        {
            <div class="flip-card">
                <div class="flip-card-inner">
                    <div class="flip-card-front">
                        <h5>Claim ID: @claim.ID</h5>
                        <div class="claim-info">
                            <strong>Period Start:</strong> @claim.ClaimsPeriodStart.ToString("yyyy-MM-dd")
                        </div>
                        <div class="claim-info">
                            <strong>Period End:</strong> @claim.ClaimsPeriodEnd.ToString("yyyy-MM-dd")
                        </div>
                        <div class="claim-info">
                            <strong>Total Amount:</strong> @claim.TotalAmount.ToString("C")
                        </div>
                        <div class="claim-info">
                            <strong>Date and Time Submitted:</strong> @claim.DateSubmitted.ToString()
                        </div>
                        <div class="claim-info">
                            <strong>Status:</strong> @claim.ClaimStatus
                        </div>
                        <select class="form-control status-dropdown" data-claim-id="@claim.ID">
                            <option value="" disabled selected hidden style="text-align: center">Change Status Here</option>
                            <option value="Pending">Pending</option>
                            <option value="Processed" >Processed</option>
                            <option value="Rejected">Rejected</option>
                        </select>
                        <button class="flip-button view-details" data-claim-id="@claim.ID">View Details</button>
                    </div>
                    <div class="flip-card-back">
                        <h5>Lecturer Details</h5>
                        <div class="claim-info"><strong>First Name:</strong> @claim.FirstName </div>
                        <div class="claim-info"><strong>Last Name:</strong> @claim.LastName</div>
                        <div class="claim-info"><strong>Email:</strong> @claim.Email</div>
                        <button class="flip-button back">Back</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="alert alert-warning">No claims found.</p>
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script>
    $('.view-details').click(function () {
        var claimId = $(this).data('claim-id');
        console.log("Claim ID fetched: ", claimId); // Add this to check what ID is fetched

        $.ajax({
            url: '@Url.Action("GetLecturerDetails", "Claims")', // Check this URL is correct
            type: 'GET',
            data: { claimId: claimId },
            success: function (lecturerDetails) {
                // success actions
            },
            error: function (xhr) {
            }
        });
    });
    $(document).ready(function () {
        // Filter cards based on date range input
        $('#startDate, #endDate').on('change', function () {
            var startDate = new Date($('#startDate').val());
            var endDate = new Date($('#endDate').val());

            // Only filter if both dates are selected
            if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {
                $('.flip-card').each(function () {
                    var claimDate = new Date($(this).find('.claim-info:contains("Period Start")').text().split(': ')[1]);
                    $(this).toggle(claimDate >= startDate && claimDate <= endDate);
                });
            }
        });

        // Reset button functionality
        $('#resetButton').click(function () {
            $('#startDate').val('');
            $('#endDate').val('');
            $('.flip-card').show();
        });

        // Handle status update
        $('.status-dropdown').change(function () {
            var claimId = $(this).data('claim-id');
            var newStatus = $(this).val();

            $.ajax({
                url: '@Url.Action("UpdateClaimStatus", "Claims")', // Adjust the URL to your controller and action
                type: 'POST',
                data: {
                    claimId: claimId,
                    newStatus: newStatus
                },
                success: function (response) {
                    var toastrOptions = {
                        positionClass: 'toast-top-right',
                        timeOut: 5000,
                        closeButton: true,
                        progressBar: true
                    };

                    switch (newStatus) {
                        case 'Pending':
                            toastr.warning('Claim status updated to: ' + newStatus, 'Pending', toastrOptions);
                            break;
                        case 'Processed':
                            toastr.success('Claim status updated to: ' + newStatus, 'Processed', toastrOptions);
                            break;
                        case 'Rejected':
                            toastr.error('Claim status updated to: ' + newStatus, 'Rejected', toastrOptions);
                            break;
                        default:
                            toastr.info('Claim status updated to: ' + newStatus, 'Updated', toastrOptions);
                            break;
                    }
                },
                error: function (xhr, status, error) {
                    toastr.error('Failed to update claim status. Please try again.', 'Error', {
                        positionClass: 'toast-top-right',
                        timeOut: 5000,
                        closeButton: true,
                        progressBar: true
                    });
                    console.error(error);
                }
            });
        });

        // Flip card when View Details or Back button is clicked
        $('.view-details, .back').click(function () {
            // Close all other cards before toggling the clicked one
            var currentCard = $(this).closest('.flip-card');
            $('.flip-card').not(currentCard).each(function () {
                if ($(this).hasClass('flipped')) {
                    $(this).removeClass('flipped');
                }
            });

            // Toggle the current card
            currentCard.toggleClass('flipped');
        });
    });



</script>